============================= test session starts ==============================
platform darwin -- Python 3.9.13, pytest-7.4.4, pluggy-1.5.0
rootdir: /Users/soheegoo/UofT/ggr274_homework5
plugins: anyio-4.3.0, json-report-1.5.0, Faker-20.1.0, metadata-3.1.1, json-0.4.0
collected 27 items

test_hw5.py Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/notebook_helper/importer/__init__.py", line 118, in run
    exec(code, self._mod.__dict__)
  File "Homework_5_solutions.ipynb", line 1, in <module>
    {
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 532, in boxplot_frame
    plot_backend = _get_plot_backend(backend)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1944, in _get_plot_backend
    module = _load_backend(backend_str)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1874, in _load_backend
    raise ImportError(
ImportError: matplotlib is required for plotting when the default backend "matplotlib" is selected.

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/notebook_helper/importer/__init__.py", line 118, in run
    exec(code, self._mod.__dict__)
  File "Homework_5_solutions.ipynb", line 1, in <module>
    {
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 532, in boxplot_frame
    plot_backend = _get_plot_backend(backend)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1944, in _get_plot_backend
    module = _load_backend(backend_str)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1874, in _load_backend
    raise ImportError(
ImportError: matplotlib is required for plotting when the default backend "matplotlib" is selected.

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/notebook_helper/importer/__init__.py", line 118, in run
    exec(code, self._mod.__dict__)
  File "test2.ipynb", line 1, in <module>
    {
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 532, in boxplot_frame
    plot_backend = _get_plot_backend(backend)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1944, in _get_plot_backend
    module = _load_backend(backend_str)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1874, in _load_backend
    raise ImportError(
ImportError: matplotlib is required for plotting when the default backend "matplotlib" is selected.

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/notebook_helper/importer/__init__.py", line 118, in run
    exec(code, self._mod.__dict__)
  File "test2.ipynb", line 1, in <module>
    {
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 532, in boxplot_frame
    plot_backend = _get_plot_backend(backend)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1944, in _get_plot_backend
    module = _load_backend(backend_str)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1874, in _load_backend
    raise ImportError(
ImportError: matplotlib is required for plotting when the default backend "matplotlib" is selected.

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/notebook_helper/importer/__init__.py", line 118, in run
    exec(code, self._mod.__dict__)
  File "test2.ipynb", line 1, in <module>
    {
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 532, in boxplot_frame
    plot_backend = _get_plot_backend(backend)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1944, in _get_plot_backend
    module = _load_backend(backend_str)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1874, in _load_backend
    raise ImportError(
ImportError: matplotlib is required for plotting when the default backend "matplotlib" is selected.

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/notebook_helper/importer/__init__.py", line 118, in run
    exec(code, self._mod.__dict__)
  File "test2.ipynb", line 1, in <module>
    {
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 532, in boxplot_frame
    plot_backend = _get_plot_backend(backend)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1944, in _get_plot_backend
    module = _load_backend(backend_str)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1874, in _load_backend
    raise ImportError(
ImportError: matplotlib is required for plotting when the default backend "matplotlib" is selected.

FF......................FF.

=================================== FAILURES ===================================
________________ test_time_boxplots[Homework_5_solutions-test2] ________________

    def test_time_boxplots():
        """Test that the 'time_boxplots' variable has been defined
        correctly in your notebook.
        """

        # Check that the variable exists in the notebook
>       assert hasattr(hw, 'time_boxplots'),\
                'We could not find a variable called "time_boxplots" in your file.'
E       AssertionError: We could not find a variable called "time_boxplots" in your file.
E       assert False
E        +  where False = hasattr(hw, 'time_boxplots')

test_hw5.py:48: AssertionError
___________ test_time_boxplots_age_label[Homework_5_solutions-test2] ___________

    def test_time_boxplots_age_label():
        """Test that the 'time_boxplots_age_label' variable has been defined
        correctly in your notebook.
        """

        # Check that the variable exists in the notebook
>       assert hasattr(hw, 'time_boxplots_age_label'),\
                'We could not find a variable called "time_boxplots_age_label" in your file.'
E       AssertionError: We could not find a variable called "time_boxplots_age_label" in your file.
E       assert False
E        +  where False = hasattr(hw, 'time_boxplots_age_label')

test_hw5.py:83: AssertionError
_ test_expected_value[Homework_5_solutions-test2-test2-Homework_5_solutions-group_means-args9] _

student_hw = <module 'test2' (<notebook_helper.importer.NotebookLoader object at 0x1033a8910>)>
soln_nb = <module 'Homework_5_solutions' (<notebook_helper.importer.NotebookLoader object at 0x1033a8910>)>
var_name = 'group_means', args = {}

    @pytest.mark.parametrize("student_hw,soln_nb,var_name,args", parameters)
    def test_answer_equality(student_hw, soln_nb, var_name, args):
        msg = f"ISSUE FOUND: The required variable name \"{var_name}\" is missing from your submission.\n"
        assert hasattr(student_hw, var_name), msg

        student_value = getattr(student_hw, var_name)
        soln_value = getattr(soln_nb, var_name)

        # If either variable is of numpy generic type, then we can skip the type check
        # and go straight to the equality check. As some of the values in the hw/soln may be correct
        # but the difference might be <int> vs <numpy.int64>.
        if not(isinstance(student_value, np.generic) or isinstance(soln_value, np.generic)):
            assert_type(var_name, student_value, soln_value)

        if isinstance(soln_value, pd.Series):
            pd.testing.assert_series_equal(student_value, soln_value, obj=var_name, **args)
        elif isinstance(soln_value, pd.DataFrame):
>           pd.testing.assert_frame_equal(student_value, soln_value, obj=var_name, **args)

/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/cds_testing/__init__.py:58:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>   ???
E   AssertionError: group_means.iloc[:, 3] (column name="Total time (hour)") are different
E
E   group_means.iloc[:, 3] (column name="Total time (hour)") values are different (100.0 %)
E   [index]: [15-24, 25-34, 35-44, 45-54, 55-64, 65-74, 75+]
E   [left]:  [81.78468664187186, 81.78468664187186, 81.78468664187186, 81.78468664187186, 81.78468664187186, 81.78468664187186, 81.78468664187186]
E   [right]: [12.998697916666666, 11.509071729957807, 11.136524822695037, 11.124595469255663, 11.652380952380952, 11.637820512820511, 11.725595238095238]
E   At positional index 0, first diff: 81.78468664187186 != 12.998697916666666

testing.pyx:173: AssertionError
_ test_expected_value[Homework_5_solutions-test2-test2-Homework_5_solutions-group_means_sorted-args10] _

student_hw = <module 'test2' (<notebook_helper.importer.NotebookLoader object at 0x1033a8910>)>
soln_nb = <module 'Homework_5_solutions' (<notebook_helper.importer.NotebookLoader object at 0x1033a8910>)>
var_name = 'group_means_sorted', args = {}

    @pytest.mark.parametrize("student_hw,soln_nb,var_name,args", parameters)
    def test_answer_equality(student_hw, soln_nb, var_name, args):
        msg = f"ISSUE FOUND: The required variable name \"{var_name}\" is missing from your submission.\n"
        assert hasattr(student_hw, var_name), msg

        student_value = getattr(student_hw, var_name)
        soln_value = getattr(soln_nb, var_name)

        # If either variable is of numpy generic type, then we can skip the type check
        # and go straight to the equality check. As some of the values in the hw/soln may be correct
        # but the difference might be <int> vs <numpy.int64>.
        if not(isinstance(student_value, np.generic) or isinstance(soln_value, np.generic)):
            assert_type(var_name, student_value, soln_value)

        if isinstance(soln_value, pd.Series):
            pd.testing.assert_series_equal(student_value, soln_value, obj=var_name, **args)
        elif isinstance(soln_value, pd.DataFrame):
>           pd.testing.assert_frame_equal(student_value, soln_value, obj=var_name, **args)

/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/cds_testing/__init__.py:58:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>   ???
E   AssertionError: group_means_sorted.index are different
E
E   group_means_sorted.index values are different (85.71429 %)
E   [left]:  Index(['15-24', '25-34', '35-44', '45-54', '55-64', '65-74', '75+'], dtype='object')
E   [right]: Index(['15-24', '75+', '55-64', '65-74', '25-34', '35-44', '45-54'], dtype='object')
E   At positional index 1, first diff: 25-34 != 75+

testing.pyx:173: AssertionError
=========================== short test summary info ============================
FAILED test_hw5.py::test_time_boxplots[Homework_5_solutions-test2] - Assertio...
FAILED test_hw5.py::test_time_boxplots_age_label[Homework_5_solutions-test2]
FAILED test_hw5.py::test_expected_value[Homework_5_solutions-test2-test2-Homework_5_solutions-group_means-args9]
FAILED test_hw5.py::test_expected_value[Homework_5_solutions-test2-test2-Homework_5_solutions-group_means_sorted-args10]
========================= 4 failed, 23 passed in 1.81s =========================
