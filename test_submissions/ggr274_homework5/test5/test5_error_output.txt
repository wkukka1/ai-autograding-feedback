============================= test session starts ==============================
platform darwin -- Python 3.9.13, pytest-7.4.4, pluggy-1.5.0
rootdir: /Users/soheegoo/UofT/ggr274_homework5
plugins: anyio-4.3.0, json-report-1.5.0, Faker-20.1.0, metadata-3.1.1, json-0.4.0
collected 27 items

test_hw5.py Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/notebook_helper/importer/__init__.py", line 118, in run
    exec(code, self._mod.__dict__)
  File "Homework_5_solutions.ipynb", line 1, in <module>
    {
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 532, in boxplot_frame
    plot_backend = _get_plot_backend(backend)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1944, in _get_plot_backend
    module = _load_backend(backend_str)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1874, in _load_backend
    raise ImportError(
ImportError: matplotlib is required for plotting when the default backend "matplotlib" is selected.

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/notebook_helper/importer/__init__.py", line 118, in run
    exec(code, self._mod.__dict__)
  File "Homework_5_solutions.ipynb", line 1, in <module>
    {
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 532, in boxplot_frame
    plot_backend = _get_plot_backend(backend)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1944, in _get_plot_backend
    module = _load_backend(backend_str)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1874, in _load_backend
    raise ImportError(
ImportError: matplotlib is required for plotting when the default backend "matplotlib" is selected.

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/notebook_helper/importer/__init__.py", line 118, in run
    exec(code, self._mod.__dict__)
  File "test5.ipynb", line 1, in <module>
    {
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 532, in boxplot_frame
    plot_backend = _get_plot_backend(backend)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1944, in _get_plot_backend
    module = _load_backend(backend_str)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1874, in _load_backend
    raise ImportError(
ImportError: matplotlib is required for plotting when the default backend "matplotlib" is selected.

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/notebook_helper/importer/__init__.py", line 118, in run
    exec(code, self._mod.__dict__)
  File "test5.ipynb", line 1, in <module>
    {
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 532, in boxplot_frame
    plot_backend = _get_plot_backend(backend)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1944, in _get_plot_backend
    module = _load_backend(backend_str)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1874, in _load_backend
    raise ImportError(
ImportError: matplotlib is required for plotting when the default backend "matplotlib" is selected.

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/notebook_helper/importer/__init__.py", line 118, in run
    exec(code, self._mod.__dict__)
  File "test5.ipynb", line 1, in <module>
    {
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 532, in boxplot_frame
    plot_backend = _get_plot_backend(backend)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1944, in _get_plot_backend
    module = _load_backend(backend_str)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1874, in _load_backend
    raise ImportError(
ImportError: matplotlib is required for plotting when the default backend "matplotlib" is selected.

Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/notebook_helper/importer/__init__.py", line 118, in run
    exec(code, self._mod.__dict__)
  File "test5.ipynb", line 1, in <module>
    {
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 532, in boxplot_frame
    plot_backend = _get_plot_backend(backend)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1944, in _get_plot_backend
    module = _load_backend(backend_str)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pandas/plotting/_core.py", line 1874, in _load_backend
    raise ImportError(
ImportError: matplotlib is required for plotting when the default backend "matplotlib" is selected.

FF....................FF.F.

=================================== FAILURES ===================================
________________ test_time_boxplots[Homework_5_solutions-test5] ________________

    def test_time_boxplots():
        """Test that the 'time_boxplots' variable has been defined
        correctly in your notebook.
        """

        # Check that the variable exists in the notebook
>       assert hasattr(hw, 'time_boxplots'),\
                'We could not find a variable called "time_boxplots" in your file.'
E       AssertionError: We could not find a variable called "time_boxplots" in your file.
E       assert False
E        +  where False = hasattr(hw, 'time_boxplots')

test_hw5.py:48: AssertionError
___________ test_time_boxplots_age_label[Homework_5_solutions-test5] ___________

    def test_time_boxplots_age_label():
        """Test that the 'time_boxplots_age_label' variable has been defined
        correctly in your notebook.
        """

        # Check that the variable exists in the notebook
>       assert hasattr(hw, 'time_boxplots_age_label'),\
                'We could not find a variable called "time_boxplots_age_label" in your file.'
E       AssertionError: We could not find a variable called "time_boxplots_age_label" in your file.
E       assert False
E        +  where False = hasattr(hw, 'time_boxplots_age_label')

test_hw5.py:83: AssertionError
_ test_expected_value[Homework_5_solutions-test5-test5-Homework_5_solutions-diff-args7] _

student_hw = <module 'test5' (<notebook_helper.importer.NotebookLoader object at 0x101d78040>)>
soln_nb = <module 'Homework_5_solutions' (<notebook_helper.importer.NotebookLoader object at 0x101d78040>)>
var_name = 'diff', args = {}

    @pytest.mark.parametrize("student_hw,soln_nb,var_name,args", parameters)
    def test_answer_equality(student_hw, soln_nb, var_name, args):
        msg = f"ISSUE FOUND: The required variable name \"{var_name}\" is missing from your submission.\n"
        assert hasattr(student_hw, var_name), msg

        student_value = getattr(student_hw, var_name)
        soln_value = getattr(soln_nb, var_name)

        # If either variable is of numpy generic type, then we can skip the type check
        # and go straight to the equality check. As some of the values in the hw/soln may be correct
        # but the difference might be <int> vs <numpy.int64>.
        if not(isinstance(student_value, np.generic) or isinstance(soln_value, np.generic)):
            assert_type(var_name, student_value, soln_value)

        if isinstance(soln_value, pd.Series):
            pd.testing.assert_series_equal(student_value, soln_value, obj=var_name, **args)
        elif isinstance(soln_value, pd.DataFrame):
            pd.testing.assert_frame_equal(student_value, soln_value, obj=var_name, **args)
        elif isinstance(soln_value, list):
            assert_list_equality(student_value, soln_value, var_name)
        else:
            msg = (
                f"ISSUE FOUND: The value of your variable {var_name} does not match the expected value,\n\n"
                f"\n"
                f"Yours:     {student_value}"
                f"\n"
                f"Expected:     {soln_value}"
                f"\n\n"
                f"In case it helps, your variable {var_name} has type {type(student_value).__name__}.\n"
            )

            if isinstance(soln_value, float):
                soln_value = pytest.approx(soln_value, **args)
>           assert student_value == soln_value, msg
E           AssertionError: ISSUE FOUND: The value of your variable diff does not match the expected value,
E
E
E           Yours:     -16649
E           Expected:     16649
E
E           In case it helps, your variable diff has type int.

/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/cds_testing/__init__.py:74: AssertionError
_ test_expected_value[Homework_5_solutions-test5-test5-Homework_5_solutions-pct_lost-args8] _

student_hw = <module 'test5' (<notebook_helper.importer.NotebookLoader object at 0x101d78040>)>
soln_nb = <module 'Homework_5_solutions' (<notebook_helper.importer.NotebookLoader object at 0x101d78040>)>
var_name = 'pct_lost', args = {}

    @pytest.mark.parametrize("student_hw,soln_nb,var_name,args", parameters)
    def test_answer_equality(student_hw, soln_nb, var_name, args):
        msg = f"ISSUE FOUND: The required variable name \"{var_name}\" is missing from your submission.\n"
        assert hasattr(student_hw, var_name), msg

        student_value = getattr(student_hw, var_name)
        soln_value = getattr(soln_nb, var_name)

        # If either variable is of numpy generic type, then we can skip the type check
        # and go straight to the equality check. As some of the values in the hw/soln may be correct
        # but the difference might be <int> vs <numpy.int64>.
        if not(isinstance(student_value, np.generic) or isinstance(soln_value, np.generic)):
>           assert_type(var_name, student_value, soln_value)

/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/cds_testing/__init__.py:53:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

var_name = 'pct_lost', var_value = -96, expected_value = 95.74

    def assert_type(var_name, var_value, expected_value):
        """ Verifies that the students answer is of the correct type."""
        msg = f"ISSUE FOUND: Your variable {var_name} has type {type(var_value)} but should have type {type(expected_value)}.\n"
>       assert isinstance(var_value, type(expected_value)), msg
E       AssertionError: ISSUE FOUND: Your variable pct_lost has type <class 'int'> but should have type <class 'float'>.

/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/cds_testing/__init__.py:32: AssertionError
_ test_expected_value[Homework_5_solutions-test5-test5-Homework_5_solutions-group_means_sorted-args10] _

student_hw = <module 'test5' (<notebook_helper.importer.NotebookLoader object at 0x101d78040>)>
soln_nb = <module 'Homework_5_solutions' (<notebook_helper.importer.NotebookLoader object at 0x101d78040>)>
var_name = 'group_means_sorted', args = {}

    @pytest.mark.parametrize("student_hw,soln_nb,var_name,args", parameters)
    def test_answer_equality(student_hw, soln_nb, var_name, args):
        msg = f"ISSUE FOUND: The required variable name \"{var_name}\" is missing from your submission.\n"
        assert hasattr(student_hw, var_name), msg

        student_value = getattr(student_hw, var_name)
        soln_value = getattr(soln_nb, var_name)

        # If either variable is of numpy generic type, then we can skip the type check
        # and go straight to the equality check. As some of the values in the hw/soln may be correct
        # but the difference might be <int> vs <numpy.int64>.
        if not(isinstance(student_value, np.generic) or isinstance(soln_value, np.generic)):
            assert_type(var_name, student_value, soln_value)

        if isinstance(soln_value, pd.Series):
            pd.testing.assert_series_equal(student_value, soln_value, obj=var_name, **args)
        elif isinstance(soln_value, pd.DataFrame):
>           pd.testing.assert_frame_equal(student_value, soln_value, obj=var_name, **args)

/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/cds_testing/__init__.py:58:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>   ???
E   AssertionError: group_means_sorted.index are different
E
E   group_means_sorted.index values are different (85.71429 %)
E   [left]:  Index(['45-54', '35-44', '25-34', '65-74', '55-64', '75+', '15-24'], dtype='object')
E   [right]: Index(['15-24', '75+', '55-64', '65-74', '25-34', '35-44', '45-54'], dtype='object')
E   At positional index 0, first diff: 45-54 != 15-24

testing.pyx:173: AssertionError
=========================== short test summary info ============================
FAILED test_hw5.py::test_time_boxplots[Homework_5_solutions-test5] - Assertio...
FAILED test_hw5.py::test_time_boxplots_age_label[Homework_5_solutions-test5]
FAILED test_hw5.py::test_expected_value[Homework_5_solutions-test5-test5-Homework_5_solutions-diff-args7]
FAILED test_hw5.py::test_expected_value[Homework_5_solutions-test5-test5-Homework_5_solutions-pct_lost-args8]
FAILED test_hw5.py::test_expected_value[Homework_5_solutions-test5-test5-Homework_5_solutions-group_means_sorted-args10]
========================= 5 failed, 22 passed in 2.05s =========================
